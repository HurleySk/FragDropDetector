#!/usr/bin/env python3
"""
FragDropDetector Setup Validation Script
Checks if all required components are properly configured
"""

import os
import sys
from dotenv import load_dotenv

def print_header():
    print("=" * 70)
    print("FRAGDROPDETECTOR SETUP VALIDATION")
    print("=" * 70)
    print()

def check_reddit_credentials():
    """Check basic Reddit API credentials"""
    print("üîë Reddit API Credentials")
    print("-" * 30)

    client_id = os.getenv('REDDIT_CLIENT_ID')
    client_secret = os.getenv('REDDIT_CLIENT_SECRET')

    if not client_id or not client_secret:
        print("‚ùå Missing Reddit API credentials")
        print("   Add REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET to .env")
        print("   Get them from https://www.reddit.com/prefs/apps")
        return False

    print(f"‚úÖ Client ID: {client_id[:10]}...")
    print(f"‚úÖ Client Secret: {'*' * len(client_secret)}")
    return True

def check_reddit_authentication():
    """Check Reddit user authentication"""
    print("\nüë§ Reddit User Authentication")
    print("-" * 35)

    refresh_token = os.getenv('REDDIT_REFRESH_TOKEN')
    username = os.getenv('REDDIT_USERNAME')

    if not refresh_token:
        print("‚ùå Reddit authentication NOT configured")
        print("   Reddit monitoring is DISABLED")
        print("   Run: python generate_token_headless.py")
        print("")
        print("   Impact:")
        print("   ‚Ä¢ Will miss member-only posts in r/MontagneParfums")
        print("   ‚Ä¢ Notification links may not work")
        print("   ‚Ä¢ Incomplete drop detection")
        return False

    # Test the authentication
    try:
        import praw
        client_id = os.getenv('REDDIT_CLIENT_ID')
        client_secret = os.getenv('REDDIT_CLIENT_SECRET')

        reddit = praw.Reddit(
            client_id=client_id,
            client_secret=client_secret,
            refresh_token=refresh_token,
            user_agent="FragDropDetector/1.0"
        )

        user = reddit.user.me()
        print(f"‚úÖ Authenticated as: u/{user.name}")

        # Check r/MontagneParfums access
        try:
            sub = reddit.subreddit("MontagneParfums")
            posts = list(sub.new(limit=1))
            if posts:
                print("‚úÖ Can access r/MontagneParfums posts")
            else:
                print("‚ö†Ô∏è  r/MontagneParfums appears empty (may be private)")
        except Exception as e:
            print(f"‚ö†Ô∏è  Cannot access r/MontagneParfums: {e}")

        return True

    except Exception as e:
        print(f"‚ùå Authentication test failed: {e}")
        print("   Your refresh token may have expired")
        print("   Run: python generate_token_headless.py")
        return False

def check_notifications():
    """Check notification services"""
    print("\nüì± Notification Services")
    print("-" * 30)

    services_configured = 0

    # Pushover
    pushover_token = os.getenv('PUSHOVER_APP_TOKEN')
    pushover_user = os.getenv('PUSHOVER_USER_KEY')
    if pushover_token and pushover_user and pushover_token != 'your_app_token_here':
        print("‚úÖ Pushover configured")
        services_configured += 1
    else:
        print("‚ö™ Pushover not configured")

    # Discord
    discord_webhook = os.getenv('DISCORD_WEBHOOK_URL')
    if discord_webhook and discord_webhook != 'paste_your_webhook_url_here':
        print("‚úÖ Discord webhook configured")
        services_configured += 1
    else:
        print("‚ö™ Discord webhook not configured")

    # Email
    smtp_server = os.getenv('SMTP_SERVER')
    email_sender = os.getenv('EMAIL_SENDER')
    email_password = os.getenv('EMAIL_PASSWORD')
    if all([smtp_server, email_sender, email_password]) and smtp_server != 'smtp.gmail.com':
        print("‚úÖ Email notifications configured")
        services_configured += 1
    else:
        print("‚ö™ Email notifications not configured")

    if services_configured == 0:
        print("\n‚ùå No notification services configured!")
        print("   You won't receive any drop alerts")
        print("   Configure at least one service in .env")
        return False
    else:
        print(f"\n‚úÖ {services_configured} notification service(s) configured")
        return True

def check_system_status():
    """Check overall system status"""
    print("\nüñ•Ô∏è  System Status")
    print("-" * 20)

    try:
        # Check if main dependencies are available
        import praw
        print("‚úÖ PRAW (Reddit API) available")
    except ImportError:
        print("‚ùå PRAW not installed (pip install praw)")
        return False

    try:
        import yaml
        print("‚úÖ YAML parser available")
    except ImportError:
        print("‚ùå PyYAML not installed (pip install pyyaml)")
        return False

    # Check config file
    config_path = os.path.join('config', 'config.yaml')
    if os.path.exists(config_path):
        print("‚úÖ Configuration file exists")
        try:
            with open(config_path, 'r') as f:
                yaml.safe_load(f)
            print("‚úÖ Configuration file valid")
        except Exception as e:
            print(f"‚ùå Configuration file invalid: {e}")
            return False
    else:
        print("‚ö™ No config.yaml file (will use defaults)")

    return True

def print_summary(reddit_creds, reddit_auth, notifications, system):
    """Print setup summary"""
    print("\n" + "=" * 70)
    print("SETUP SUMMARY")
    print("=" * 70)

    if all([reddit_creds, reddit_auth, notifications, system]):
        print("üéâ SETUP COMPLETE!")
        print("")
        print("‚úÖ Reddit API credentials configured")
        print("‚úÖ Reddit user authentication active")
        print("‚úÖ Notification services configured")
        print("‚úÖ System dependencies available")
        print("")
        print("Your FragDropDetector is ready to monitor drops!")
        print("")
        print("Next steps:")
        print("‚Ä¢ Start monitoring: python main.py")
        print("‚Ä¢ Start web interface: python web_server.py")
        print("‚Ä¢ Access dashboard: http://localhost:8000")

    elif reddit_creds and not reddit_auth and notifications and system:
        print("‚ö†Ô∏è  PARTIAL SETUP - Reddit Authentication Missing")
        print("")
        print("‚úÖ Reddit API credentials configured")
        print("‚ùå Reddit user authentication missing")
        print("‚úÖ Notification services configured")
        print("‚úÖ System dependencies available")
        print("")
        print("CRITICAL: Reddit monitoring is DISABLED!")
        print("")
        print("To enable Reddit monitoring:")
        print("1. SSH with port forwarding: ssh -L 8080:localhost:8080 pi@YOUR_IP")
        print("2. Run: python generate_token_headless.py")
        print("3. Follow browser authentication steps")
        print("")
        print("Stock monitoring will work, but you'll miss Reddit drops!")

    else:
        print("‚ùå SETUP INCOMPLETE")
        print("")
        print("Missing components:")
        if not reddit_creds:
            print("‚Ä¢ Reddit API credentials")
        if not reddit_auth:
            print("‚Ä¢ Reddit user authentication")
        if not notifications:
            print("‚Ä¢ Notification services")
        if not system:
            print("‚Ä¢ System dependencies")
        print("")
        print("Please fix the issues above before running FragDropDetector.")

def main():
    """Main setup check"""
    load_dotenv()

    print_header()

    reddit_creds = check_reddit_credentials()
    reddit_auth = check_reddit_authentication()
    notifications = check_notifications()
    system = check_system_status()

    print_summary(reddit_creds, reddit_auth, notifications, system)

if __name__ == "__main__":
    main()